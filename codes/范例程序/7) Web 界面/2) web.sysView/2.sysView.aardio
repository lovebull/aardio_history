//入门
import win.ui;
/*DSG{{*/
var winform = win.form(text="Edge 浏览器控件 - web.sysView";right=1061;bottom=668;bgcolor=16777215)
winform.add()
/*}}*/

/*
web.sysView 使用 WIN10自带的 WebView1，体积非常小（打包仅增加几十KB），
WebView1 控件的窗口类名是 IE的类名，但实际上并不使用 IE内核，而是基于比较新的 Edge 或 Chromium 内核。
缺点是只支持 WIN10，且首次运行可能会有一个点击启用访问本机页面权限的提示（需要请求管理权限）
如果软件本身有管理权限，可调用 web.sysView.exemptAs() 静默启用该权限。
*/
import web.sysView;
var wb = web.sysView(winform);
assert(wb,"web.sysView 仅支持 WIN 10")

//导出任意个 Javascript 全局函数, 使用JSON自动转换参数和返回值
//注意下面的 JS 回调函数内禁止调用 wb.doScript 或  wb.eval 执行Javascript。
wb.export({
    alert = function(msg){
		winform.msgbox(msg)
		return 123; 
	}
	nativeLog = function(msg){
		winform.msgbox(msg) 
	}
})

/*
可以直接用 wb.html 属性写入 HTML 代码。
现在很多前端的东西,他们在设计都是考虑为网站设计的，所以在本地的HTML上运行有时候有很多奇怪的问题，
而且近年这种问题越来越普遍，但这在 aardio 里面却可以极简单的解决。aardio 里只要两三句代码就可以启动一个 HTTP 服务器。

下面启动一个 HTTP 服务器打开网页，aardio 提供的嵌入式HTTP服务器小、轻、快，并自动分配空闲端口,
HTTP 服务器用于浏览器组件时可以让网页支持 localStorage ，以及支持打开 aardio 工程中的资源文件。
可以让 web.sysView 支持 eruda.js 创建的调试控制台（ web.sysView 没有 web.view 那样自带的开发者工具 ）
注意如果不启动 HTTP服务器，下面的 eruda.js 是跑不起来的。
*/
import wsock.tcp.asynHttpServer;
var httpServer = wsock.tcp.asynHttpServer(); 
httpServer.run( {
	["/index.html"] = /**
<!doctype html>
<html>
<head>
    <meta charset="utf-8">
    <style type="text/css">
    html,body{ height:100%; } 
    </style>
    
    <script src="http://cdn.jsdelivr.net/npm/eruda"></script>
	<script>eruda.init();</script>
	
    <script type="text/javascript">
    alert("test").then( v=>nativeLog(v))
    </script>
</head>
<body style="margin:50px"><pre>
<b>扩展库 web.sysView</b>
-----------------------------------
如果是WIN10 系统并且未安装 WebView2 Runtime ，
调用 WIN10 系统 Edge/Edge(Chromium) 浏览器自带的 WebView1 创建浏览器控件。 
WebView1 是 UWP 控件，默认不能不能访问本机 locahost，
aardio 在运行时会检测并自动解除限制（但有请求管理权限的提示）。

如果是 WIN7，WIN8 或者已安装 WebView2 Runtime ，
web.sysView 会自动调用标准库 web.view 创建对象。

web.sysView 的体积非常小，可以生成独立 EXE文件。

<b>标准库 web.view</b>
-----------------------------------
基于 WebView2（Edge/Chromium内核），支持 WIN7，WIN8，WIN10。
WebView2 Runtime 需要单独安装，但没有默认不能访问本机 locahost 的限制。

运行时可自动安装 WebView2 Runtime， 安装包较大并需要请求管理权限。
好在微软官方提供下载，速度非常快，所以体验还不错，并且这种公共运行库，应当会较快普及。

web.view 库的体积非常小，可以生成独立 EXE文件。
</pre></body>
</html>
</html>
**/
}); 

wb.go( httpServer.getUrl("index.html") )
//wb.go("https://quickref.me/javascript")

//执行 JS 并获取返回值。
wb.doScript("window.location.href",function(result,err){
	winform.text = result;
})

winform.show();
win.loopMessage();