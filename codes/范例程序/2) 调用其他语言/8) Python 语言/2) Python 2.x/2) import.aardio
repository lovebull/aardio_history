//使用模块 

/*
添加第三方 Python 模块失败的可能原因：
1、低级错误，模块放错了位置。
2、模块的版本与 Python 版本不兼容。
3、可能缺少了其他依赖模块和依赖文件，而依赖模块又可能重复出现这几个问题，请耐心爬坑。

系统安装的 Python 与你在 aardio 加载的 Python 请使用完全相同的版本，
然后用 pip 安装模块，再把安装好的模块手动复制到 aardio 里面。

aardio 代码内文件路径开始为斜杠（或反斜杠）表示应用程序根目录，
在工程中根目录为工程目录，工程之外单独运行的aardio文件根目录就是文件所在的目录，发布生成EXE后就是EXE所在的目录.
而文件路径开始为波浪线指的是EXE所在的目录（开发时为 aardio.exe 所在目录）

aardio 内默认的 Python 搜索模块的路径为:
"~\lib\py2\.res\Lib.zip"
"~\lib\py2\.res\"
"\"
"\py"

*.pyd 也可以放到上面的目录下, 或者 sys.path 指定的目录下，
如果 pyd 还依赖其他 DLL，也必须放到sys.path 指定的目录下， 

sys.path 默认包含以下目录：
"\" aardio 工程目录(也就是发布后的 EXE运行目录), 
"~\lib\py2\.res\DLLs"

aardio中的 Python 解释器是32位版本，
pyd 以及 DLL 必须与当前 Python 解释器使用相同的运行时构建。
关于 Python 的版本信息，可调用 py2.run() 打开解释器查看。 
*/
import console;
console.open()
import py2;

//可以自己添加模块搜索路径，例如：
py2.appendPath("\py\site-packages\");
 
/*
Python2.7 的编码问题乱得一塌糊涂。
一般把代码转为 ANSI 编码才能正常执行， py2.exec 函数已强制转为 ansi 编码。

类似下面这样 UTF8 编码直接存为 py2 代码文件，
就要在代码前面加上 #-*-coding:utf-8-*-

涉及文件路径的必须用 GBK 编码，控制台也打印中文也不太正常等等要有心理准备。
aardio 传参给 Python2.7，字符串一律编码为 ANSI ，而 Unicode 字符串直接传给 Python 中的 unicode 类型，
返回字符串一律转为 ANSI 编码，Python中 的 unicode 类型直接取回为 aardio 中的 Unicode 字符串。

Python2.7 中二进制与文本不分，所以无法自动识别二进制，
如果要读取二进制参数，使用 py2.object 对象的 parseBuffer() 函数获取。
*/

var code = /**
#-*-coding:utf-8-*-
import requests
def getHtml(url): 
    r = requests.get(url,verify=True)
    r.encoding='utf-8'
    return r.text 
**/
string.save("/myHttp.py",code )
 
var myHttp = py2.import("myHttp");
var str = myHttp.getHtml("https://www.aardio.com" );
console.log( str );

console.pause()
/*
aardio 与 Python 的 import 语句基本用法类似，
都是用来导入模块，都要求文件名与模块路径与文件路径保持一致。

但 aardio 的 import 语句语简单，
aardio 模块通常没有 Python 那么复杂的版本兼容问题，
使用 aardio 只要更新到最新版，扩展库下载最新版，基本可以向下兼容。

Python 的 import 语句则有很多复杂的功能，例如：
	from 模块名 import 函数名 
	from 模块名 import *
	from hashlib import md5 as md5New
等等用法。

aardio 需要在 import 过来的库中用 namespace 定义名字空间，
而 Python 并不需要这么做，文件放到哪里模块名字就变成什么，
所以经常会在 Python 代码中看到这句代码 if __name__ == "__main__":
如果一个库被直接执行 __name__ 的值就是 "__main__",否则就是当前导入的模块名字或者当前类的名字，

Python2.7 使用的是 VC90(VC2008) 的运行库，
而 VC90 使用了坑人的 WinSxS 动态加载 DLL 技术，要绿色打包 Python 非常的困难，
Python2.7 的官方版本是直接给安装包安装 VC90 的运行库，

我曾经写了一个库 raw.activationContext 试图直接加载 VC90 的DLL，
虽然加载成功了，Python2.7 还是找不到DLL无法加载。

还好微软自 VC2010 开始废弃了这个技术，
所以 aardio 里的 Python2.7 是使用 VC10 编译的版本，
我删除了一些不常用且体积大的模块。

如果你需要其他的模块，请到以下地址下载 python2.7.10.x32.vc10.aardio.7z 
https://www.lanzouw.com/iSayGv0q4fg
http://pan.baidu.com/s/1o7O2sbw 
python2.7.10.x32.vc10.aardio.7z 已经包含了 Python 2.7 的全部模块，以及第三方模块，
该版本来自：http://p-nand-q.com/python/2015.07.12-python2710-x32.7z 

因此你可以愉快的绿色打包 Python2.7 运行库了，
当你在 aardio 中调用 import py2 或 import py2 以后，
生成 EXE 就会自动复制 python 运行库到 exe 同一目录下。

Python 运行需要大量的模块、DLL(py2d)等组件，
所以不要浪费时间去追求生成独立EXE，这样的生成工具有一大堆的坑等着你去踩，
这年头你基本找不到几个正经的软件只有一个EXE的，
所以不要在这上面浪费时间。
*/
 