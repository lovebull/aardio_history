//自定义智能提示
namespace intellisense{}
/**intellisense()
MVC_ROOT_DIR = mvc系统目录,等同于工程目录
MVC_APP_DIR = mvc应用程序目录,一般指\application\ 目录
MVC_FILTERS_DIR = mvc应用过滤器目录,一般指\application\filters\ 目录
MVC_COMMON_DIR = mvc应用程序公共目录,一般指\application\common\ 目录
MVC_CARL_DIR = carlmvc核心框架目录,指\carlmvc\ 目录
MVC_CONFIG_DIR = mvc系统配置文件目录,指\config\ 目录
MVC_LOG_DIR = mvc系统日志目录,指\log\ 目录
MVC_LOG_ERROR_PATH = mvc系统错误日志文件,指\log\error.log文件
MVC_WWW_DIR = web网站目录,指\www\ 目录
MVC_LOG_RUN_DATA = mvc运行轨迹日志,记录从请求开始到结束执行过程,table对象

config.webconfig = 网站配置
config.webconfig.adminLoginUrl = 后台登录页面,主要用于没有登录,跳转到登录页面
config.webconfig.webTitle = 网站标题
config.webconfig.copyright = 网站版权
config.database = 数据库配置
config.mvcconfig = MVC应用配置

printlog = @..printlog(__/*变量*/);//打印信息,支持多个参数,仅显示普通table,string,number等类型的值,不显示函数等,在carlmvc插件调试的错误日志可以查看

tabAdminLogin = 后台登录用户信息,全局变量
end intellisense**/

/**intellisense(carl.sql)
getInsertSql(tabname,tab) = getInsertSql
getUpdateSql(tabname,tab,where) = getUpdateSql
getPageSql(sql, currentPage, pageSize, orderRowName,countName="rowCount",rowName="rowId") = getPageSql
getInsertSql(tabname,tab) = getInsertSql
getUpdateSql(tabname,tab,where) = getUpdateSql
getPageSql(sql, currentPage, pageSize, orderRowName,countName="rowCount") = getPageSql
end intellisense**/

/**intellisense(carl.rpc)
format(t) = format
unformat(t) = unformat
end intellisense**/

/**intellisense(common)
toTreeList() = toTreeList
getTabNode(row) = getTabNode
getChlidList(parentId) = getChlidList
end intellisense**/

/**intellisense(common)
formatThousandSeperator(n) = 千分位符号
formatMoney(money) = 格式化钱,并千分符
toNumber(num) = 转换成数字,
encryptPwd(pwd,keystr = "aardiomvc") = 加密
decryptPwd(pwd,keystr = "aardiomvc") = 解密
getNowTime() = getNowTime
getNowDate(date) = getNowDate
getSysNo(ex="",n=4) = 生成编号 年月日
getSysNoEx(ex="",n=3) = 生成编号 年月日时分秒
uploadFile() = uploadFile
imageThumbnail(imageUrl,w,h,saveUrl,constRatio) = 生成缩略图,返回缩图片url，第5个参数是否按比例缩放
isMobile() = isMobile
pageList(tab) = 输出分页
formatter(value) = formatter
exportExcel(tabPage,filename) = 导出excel,参数：tabPage={rows={{a="1";b="2"};{a="3";b="4"}};columns={{field="a";title="字段a"};{field="b";title="字段b";formatter=function(value){ return "自定义值"}}}
checkIDcard(A) = 校验二代18位身份证是否合法
end intellisense**/

/**intellisense(dbase.page)
getWhereSql(tabRules) = getWhereSql
getPageList(tabPage,mainSql,orderby,where,dbconfig) = getPageList
end intellisense**/

/**intellisense(dbase)
connect(dbconfig) = connect
exec(dbconfig, sql, 不定参数 ) = exec
getTable(dbconfig, sql, 不定参数 ) = getTable
getTableFirst(dbconfig, sql, 不定参数 ) = getTableFirst
getTables(dbconfig, tsql ) = 执行多个select语句,参数table对像
transaction(dbconfig, tsql ) = 事务执行，参数table对像
storedProcedures(dbconfig, 不定参数 ) = 存储过程
getInsertSql(driver, tabname, tab) = getInsertSql
getUpdateSql(driver,tabname, tab, where) = getUpdateSql
formatSqlParameters(dbconfig,sql,不定参数) = formatSqlParameters
sqlBefore(sql) = 执行sql之前回调函数，如果返回false，将不再执行sql,根据需要重写此函数,可用于sql过滤，记录等
end intellisense**/

/**intellisense(dbase.mssql.defaultDB)
getTable(sql,格式化参数) = 执行一条SQL\n成功返回查询结果集table对像\n错误返回:null,err,sql\n每个元素代表一行,每行由N个键值对列组成,键fields为列名结果集\n格式化参数 可省略\n格式化参数与string.format用法兼容,\n格式化参数也可以是一个表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
getTableFirst(sql,格式化参数) = 执行一条SQL\n成功返回查询第一条记录table对像,空记录返回空table对像\n错误返回:null,err,sql\n格式化参数 可省略\n格式化参数与string.format用法兼容,\n格式化参数也可以是一个表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
getTables(tsql) = 执行多条SQL,成功返回查询table数据集\n错误返回:null,err,sql\n参数:table对像 格式:{"sql1";"sql2"}
exec(sql,格式化参数) = 执行sql,成功返回ture,失败返回null,err,sql\n格式化参数 可省略\n格式化参数与string.format用法兼容,\n格式化参数也可以是一个表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
transaction(tsql) = 事务执行多条sql语句\n成功返回ture,失败返回null,err,sql\n参数:table对像 格式:{"sql1";"sql2"},\n说明:全部执行成功,或全部失败\n mysql表需InnoDB类型
storedProcedures(name,"其他参数") = 执行存储过程,参数1:存储过程名称,参数2以后,是传存储过程函数参数
getInsertSql("表名", tab) = 返回新增SQL语句\n参数:表名,table对像 格式:{字段1="值1";字段2="值2"}
getUpdateSql("表名", tab, where, 格式化参数table) = 返回更新SQL语句\n参数:表名, table对像,where条件,格式化参数table\n参数四 可省略\n参数二格式:{字段1="值1";字段2="值2"}\n格式化参数是一个table表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
formatSqlParameters(sql,格式化参数) = 格式化sql\n参数:sql语句,格式化参数\n格式化参数与string.format用法兼容,\n格式化参数也可以是一个表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
getPageList(tabPage,mainSql,orderby,where) = 分页查询,参数:分页条件table对像,主SQL,排序SQL语句,where条件\n具体用法请查看dbase.page分页库\n成功返回分页table记录集,失败返回null,err,sql
getInsertSql(tab) = 操作default表\n返回新增SQL语句\n参数:table对像 格式:{字段1="值1";字段2="值2"}
getUpdateSql(tab, where, 格式化参数table) = 操作default表\n返回更新SQL语句\n参数:table对像,where条件,格式化参数table\n参数一格式:{字段1="值1";字段2="值2"}\n参数三 可省略\n格式化参数是一个table表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
getAutoId() = 操作default表\n获取自主管理主键ID,仅当 tableKeyIdIsAuto=false 有效,即自主管理主键ID,非自增才可调用
insert(tab) = 操作default表\n新增一条记录\n成功返回ture,失败返回null,err,sql\n参数:table对像 格式:{字段1="值1";字段2="值2"}
insert(tab,true) = 操作default表\n新增一条记录\n成功返回自增ID,失败返回null,err,sql\n参数:table对像 格式:{字段1="值1";字段2="值2"}
update(tab, where, 格式化参数table) = 操作default表\n更新记录\n成功返回ture,失败返回null,err,sql\n参数:table对像,where条件,格式化参数table\n参数一格式:{字段1="值1";字段2="值2"}\n参数三可省略\n格式化参数是一个table表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
delete(where, 格式化参数) = 操作default表\n删除记录\n成功返回ture,失败返回null,err,sql\n参数:where条件,格式化参数\n参数二可省略\n格式化参数与string.format用法兼容,\n格式化参数也可以是一个表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
getFirstList(where, 格式化参数) = 操作default表\n成功返回where条件查询结果的第一条记录,失败返回null,err,sql\n参数:where条件,格式化参数\n参数二 可省略\n格式化参数与string.format用法兼容,\n格式化参数也可以是一个表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
getAllList(where, 格式化参数) = 操作default表\n成功返回where条件所有查询结果记录集,失败返回null,err,sql\n参数:where条件,格式化参数\n参数二 可省略\n格式化参数与string.format用法兼容,\n格式化参数也可以是一个表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
end intellisense**/

/**intellisense(dbase.mysql.defaultDB)
getTable(sql,格式化参数) = 执行一条SQL\n成功返回查询结果集table对像\n错误返回:null,err,sql\n每个元素代表一行,每行由N个键值对列组成,键fields为列名结果集\n格式化参数 可省略\n格式化参数与string.format用法兼容,\n格式化参数也可以是一个表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
getTableFirst(sql,格式化参数) = 执行一条SQL\n成功返回查询第一条记录table对像,空记录返回空table对像\n错误返回:null,err,sql\n格式化参数 可省略\n格式化参数与string.format用法兼容,\n格式化参数也可以是一个表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
getTables(tsql) = 执行多条SQL,成功返回查询table数据集\n错误返回:null,err,sql\n参数:table对像 格式:{"sql1";"sql2"}
exec(sql,格式化参数) = 执行sql,成功返回ture,失败返回null,err,sql\n格式化参数 可省略\n格式化参数与string.format用法兼容,\n格式化参数也可以是一个表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
transaction(tsql) = 事务执行多条sql语句\n成功返回ture,失败返回null,err,sql\n参数:table对像 格式:{"sql1";"sql2"},\n说明:全部执行成功,或全部失败\n mysql表需InnoDB类型
storedProcedures(name,"其他参数") = 执行存储过程,参数1:存储过程名称,参数2以后,是传存储过程函数参数
getInsertSql("表名", tab) = 返回新增SQL语句\n参数:表名,table对像 格式:{字段1="值1";字段2="值2"}
getUpdateSql("表名", tab, where, 格式化参数table) = 返回更新SQL语句\n参数:表名, table对像,where条件,格式化参数table\n参数四 可省略\n参数二格式:{字段1="值1";字段2="值2"}\n格式化参数是一个table表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
formatSqlParameters(sql,格式化参数) = 格式化sql\n参数:sql语句,格式化参数\n格式化参数与string.format用法兼容,\n格式化参数也可以是一个表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
getPageList(tabPage,mainSql,orderby,where) = 分页查询,参数:分页条件table对像,主SQL,排序SQL语句,where条件\n具体用法请查看dbase.page分页库\n成功返回分页table记录集,失败返回null,err,sql
getInsertSql(tab) = 操作default表\n返回新增SQL语句\n参数:table对像 格式:{字段1="值1";字段2="值2"}
getUpdateSql(tab, where, 格式化参数table) = 操作default表\n返回更新SQL语句\n参数:table对像,where条件,格式化参数table\n参数一格式:{字段1="值1";字段2="值2"}\n参数三 可省略\n格式化参数是一个table表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
getAutoId() = 操作default表\n获取自主管理主键ID,仅当 tableKeyIdIsAuto=false 有效,即自主管理主键ID,非自增才可调用
insert(tab) = 操作default表\n新增一条记录\n成功返回ture,失败返回null,err,sql\n参数:table对像 格式:{字段1="值1";字段2="值2"}
insert(tab,true) = 操作default表\n新增一条记录\n成功返回自增ID,失败返回null,err,sql\n参数:table对像 格式:{字段1="值1";字段2="值2"}
update(tab, where, 格式化参数table) = 操作default表\n更新记录\n成功返回ture,失败返回null,err,sql\n参数:table对像,where条件,格式化参数table\n参数一格式:{字段1="值1";字段2="值2"}\n参数三可省略\n格式化参数是一个table表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
delete(where, 格式化参数) = 操作default表\n删除记录\n成功返回ture,失败返回null,err,sql\n参数:where条件,格式化参数\n参数二可省略\n格式化参数与string.format用法兼容,\n格式化参数也可以是一个表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
getFirstList(where, 格式化参数) = 操作default表\n成功返回where条件查询结果的第一条记录,失败返回null,err,sql\n参数:where条件,格式化参数\n参数二 可省略\n格式化参数与string.format用法兼容,\n格式化参数也可以是一个表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
getAllList(where, 格式化参数) = 操作default表\n成功返回where条件所有查询结果记录集,失败返回null,err,sql\n参数:where条件,格式化参数\n参数二 可省略\n格式化参数与string.format用法兼容,\n格式化参数也可以是一个表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
end intellisense**/

/**intellisense(dbase.sqlite.defaultDB)
getTable(sql,格式化参数) = 执行一条SQL\n成功返回查询结果集table对像\n错误返回:null,err,sql\n每个元素代表一行,每行由N个键值对列组成,键fields为列名结果集\n格式化参数 可省略\n格式化参数与string.format用法兼容,\n格式化参数也可以是一个表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
getTableFirst(sql,格式化参数) = 执行一条SQL\n成功返回查询第一条记录table对像,空记录返回空table对像\n错误返回:null,err,sql\n格式化参数 可省略\n格式化参数与string.format用法兼容,\n格式化参数也可以是一个表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
getTables(tsql) = 执行多条SQL,成功返回查询table数据集\n错误返回:null,err,sql\n参数:table对像 格式:{"sql1";"sql2"}
exec(sql,格式化参数) = 执行sql,成功返回ture,失败返回null,err,sql\n格式化参数 可省略\n格式化参数与string.format用法兼容,\n格式化参数也可以是一个表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
transaction(tsql) = 事务执行多条sql语句\n成功返回ture,失败返回null,err,sql\n参数:table对像 格式:{"sql1";"sql2"},\n说明:全部执行成功,或全部失败\n mysql表需InnoDB类型
storedProcedures(name,"其他参数") = 执行存储过程,参数1:存储过程名称,参数2以后,是传存储过程函数参数
getInsertSql("表名", tab) = 返回新增SQL语句\n参数:表名,table对像 格式:{字段1="值1";字段2="值2"}
getUpdateSql("表名", tab, where, 格式化参数table) = 返回更新SQL语句\n参数:表名, table对像,where条件,格式化参数table\n参数四 可省略\n参数二格式:{字段1="值1";字段2="值2"}\n格式化参数是一个table表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
formatSqlParameters(sql,格式化参数) = 格式化sql\n参数:sql语句,格式化参数\n格式化参数与string.format用法兼容,\n格式化参数也可以是一个表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
getPageList(tabPage,mainSql,orderby,where) = 分页查询,参数:分页条件table对像,主SQL,排序SQL语句,where条件\n具体用法请查看dbase.page分页库\n成功返回分页table记录集,失败返回null,err,sql
getInsertSql(tab) = 操作default表\n返回新增SQL语句\n参数:table对像 格式:{字段1="值1";字段2="值2"}
getUpdateSql(tab, where, 格式化参数table) = 操作default表\n返回更新SQL语句\n参数:table对像,where条件,格式化参数table\n参数一格式:{字段1="值1";字段2="值2"}\n参数三 可省略\n格式化参数是一个table表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
getAutoId() = 操作default表\n获取自主管理主键ID,仅当 tableKeyIdIsAuto=false 有效,即自主管理主键ID,非自增才可调用
insert(tab) = 操作default表\n新增一条记录\n成功返回ture,失败返回null,err,sql\n参数:table对像 格式:{字段1="值1";字段2="值2"}
insert(tab,true) = 操作default表\n新增一条记录\n成功返回自增ID,失败返回null,err,sql\n参数:table对像 格式:{字段1="值1";字段2="值2"}
update(tab, where, 格式化参数table) = 操作default表\n更新记录\n成功返回ture,失败返回null,err,sql\n参数:table对像,where条件,格式化参数table\n参数一格式:{字段1="值1";字段2="值2"}\n参数三可省略\n格式化参数是一个table表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
delete(where, 格式化参数) = 操作default表\n删除记录\n成功返回ture,失败返回null,err,sql\n参数:where条件,格式化参数\n参数二可省略\n格式化参数与string.format用法兼容,\n格式化参数也可以是一个表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
getFirstList(where, 格式化参数) = 操作default表\n成功返回where条件查询结果的第一条记录,失败返回null,err,sql\n参数:where条件,格式化参数\n参数二 可省略\n格式化参数与string.format用法兼容,\n格式化参数也可以是一个表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
getAllList(where, 格式化参数) = 操作default表\n成功返回where条件所有查询结果记录集,失败返回null,err,sql\n参数:where条件,格式化参数\n参数二 可省略\n格式化参数与string.format用法兼容,\n格式化参数也可以是一个表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
end intellisense**/

/**intellisense(svc.rpc.rpcSvc)
getServerTime() = getServerTime
end intellisense**/

/**intellisense(svc.system.defaultSvc)
getPageList(tabPage) = getPageList
save(tpost) = save
getInfo(defaultId) = getInfo
end intellisense**/

/*intellisense()
mvcapp=默认MVC应用
end intellisense*/

/**intellisense(mvcapp)

loadController( = 加载一个控制器,参数:控制器路径\n如控制器文件是\mvc\controller\defaultCtl.aardio,参数只需写"default"\n控制器路径支持子目录
loadController(.("控制器路径") = 参数:控制器路径\n如控制器文件是\mvc\controller\defaultCtl.aardio,参数只需写"default"\n控制器路径支持子目录
loadControllerAction( = 执行控制器里的操作函数,参数:操作函数路径\n比如:控制器defaultCtl.aardio中的index函数,参数只需写"default.index"
loadControllerAction(.("操作函数路径") = 比如:执行控制器defaultCtl.aardio中的index函数,参数只需写"default.index"
loadControllerBefore = @.loadControllerBefore = function(controllerPath/*控制器路径名*/){
	/*控制器加载之前,触发此事件,如果返回false,不会执行控制器*/
	__
}
loadControllerAfter = @.loadControllerAfter = function(controller/*控制器对像*/, controllerPath/*控制器路径名*/){
	/*控制器加载之后,触发此事件,如果返回false,不会执行控制器内的函数*/
	__
}
loadActionBefore = @.loadActionBefore = function(controller/*控制器对像*/, controllerPath/*控制器路径名*/, actionName/*操作函数名称*/){
	/*控制器中的函数执行之前,触发此事件,如果返回false,不会执行函数*/
	__
}
loadActionAfter = @.loadActionAfter = function(controller/*控制器对像*/, controllerPath/*控制器路径名*/, actionName/*操作函数名称*/, .../*函数返回值*/ ) { 
	/*控制器中的函数执行之后,触发此事件,框架已封装,您可以重写此函数*/
	var tab,err = ...;
	__
}
loadViewBefore = @.loadViewBefore = function(controller/*控制器对像*/, controllerPath/*控制器路径名*/, actionName/*操作函数名称*/,viewpath/*视图路径*/, viewFullPath/*视图文件完整路径*/){
	/*视图加载之前,触发此事件,如果返回false,不会加载视图*/
}
loadViewAfter = @.loadViewAfter = function(controller/*控制器对像*/, controllerPath/*控制器路径名*/, actionName/*操作函数名称*/,viewpath/*视图路径*/, viewFullPath/*视图文件完整路径*/,.../*函数返回值*/){
	/*视图加载之后,触发此事件*/
}
errlog = @.errlog = function(err){
	/*发生错误时,触发此事件,框架已封装,您可以重写此函数*/
}
loadcode("mvc\代码路径") = 用法与loadcode相同,参数只能是相对于\application\应用目录下的文件路径
loadcodex("mvc\代码路径") = 用法与loadcodex相同,参数只能是相对于\application\应用目录下的文件路径
urlAction(actionName,controllerPath) = 生成MVC访问完整的URL,参数:操作函数名,控制器路径名
configController = @.configController({
		/*配置控制器*/
		dir = "mvc\controller\";		/*控制器工作目录,是相对于\application\应用目录下*/
		ext = "Ctl";					/*控制器后缀*/
		nameSpace = "mvc.controller";	/*控制器名字空间*/
	})
configView = @.configView({
		/*配置视图*/
		dir = "mvc\view\";		/*视图工作目录,是相对于\application\应用目录下*/
		ext = "";				/*视图后缀*/
	})
logdir = @.logdir = ROOT_DIR ++ "log\";/*错误日志目录,请使用绝对路径,ROOT_DIR = carl.mvc.common.fullpath("..\")*/
webpath = @.webpath = "/index.aardio";/*web网站访问入口文件,相对路径*/
appdir = @.appdir = ROOT_DIR ++ "application\";/*mvc应用目录,请使用绝对路径,ROOT_DIR = carl.mvc.common.fullpath("..\")*/

end intellisense**/

/**intellisense()
dbase.mssql() = 创建mssql数据库carlmvc连接\n!dbasemssql.
!dbasemssql.getTable(sql,格式化参数) = 执行一条SQL\n成功返回查询结果集table对像\n错误返回:null,err,sql\n每个元素代表一行,每行由N个键值对列组成,键fields为列名结果集\n格式化参数 可省略\n格式化参数与string.format用法兼容,\n格式化参数也可以是一个表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
!dbasemssql.getTableFirst(sql,格式化参数) = 执行一条SQL\n成功返回查询第一条记录table对像,空记录返回空table对像\n错误返回:null,err,sql\n格式化参数 可省略\n格式化参数与string.format用法兼容,\n格式化参数也可以是一个表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
!dbasemssql.getTables(tsql) = 执行多条SQL,成功返回查询table数据集\n错误返回:null,err,sql\n参数:table对像 格式:{"sql1";"sql2"}
!dbasemssql.exec(sql,格式化参数) = 执行sql,成功返回ture,失败返回null,err,sql\n格式化参数 可省略\n格式化参数与string.format用法兼容,\n格式化参数也可以是一个表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
!dbasemssql.transaction(tsql) = 事务执行多条sql语句\n成功返回ture,失败返回null,err,sql\n参数:table对像 格式:{"sql1";"sql2"},\n说明:全部执行成功,或全部失败\n mysql表需InnoDB类型
!dbasemssql.storedProcedures(name,"其他参数") = 执行存储过程,参数1:存储过程名称,参数2以后,是传存储过程函数参数
!dbasemssql.getInsertSql("表名", tab) = 返回新增SQL语句\n参数:表名,table对像 格式:{字段1="值1";字段2="值2"}
!dbasemssql.getUpdateSql("表名", tab, where, 格式化参数table) = 返回更新SQL语句\n参数:表名, table对像,where条件,格式化参数table\n参数四 可省略\n参数二格式:{字段1="值1";字段2="值2"}\n格式化参数是一个table表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
!dbasemssql.formatSqlParameters(sql,格式化参数) = 格式化sql\n参数:sql语句,格式化参数\n格式化参数与string.format用法兼容,\n格式化参数也可以是一个表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
!dbasemssql.getPageList(tabPage,mainSql,orderby,where) = 分页查询,参数:分页条件table对像,主SQL,排序SQL语句,where条件\n具体用法请查看dbase.page分页库\n成功返回分页table记录集,失败返回null,err,sql
end intellisense**/

/**intellisense()
dbase.mysql() = 创建mysql数据库carlmvc连接\n!dbasemysql.
!dbasemysql.getTable(sql,格式化参数) = 执行一条SQL\n成功返回查询结果集table对像\n错误返回:null,err,sql\n每个元素代表一行,每行由N个键值对列组成,键fields为列名结果集\n格式化参数 可省略\n格式化参数与string.format用法兼容,\n格式化参数也可以是一个表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
!dbasemysql.getTableFirst(sql,格式化参数) = 执行一条SQL\n成功返回查询第一条记录table对像,空记录返回空table对像\n错误返回:null,err,sql\n格式化参数 可省略\n格式化参数与string.format用法兼容,\n格式化参数也可以是一个表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
!dbasemysql.getTables(tsql) = 执行多条SQL,成功返回查询table数据集\n错误返回:null,err,sql\n参数:table对像 格式:{"sql1";"sql2"}
!dbasemysql.exec(sql,格式化参数) = 执行sql,成功返回ture,失败返回null,err,sql\n格式化参数 可省略\n格式化参数与string.format用法兼容,\n格式化参数也可以是一个表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
!dbasemysql.transaction(tsql) = 事务执行多条sql语句\n成功返回ture,失败返回null,err,sql\n参数:table对像 格式:{"sql1";"sql2"},\n说明:全部执行成功,或全部失败\n mysql表需InnoDB类型
!dbasemysql.storedProcedures(name,"其他参数") = 执行存储过程,参数1:存储过程名称,参数2以后,是传存储过程函数参数
!dbasemysql.getInsertSql("表名", tab) = 返回新增SQL语句\n参数:表名,table对像 格式:{字段1="值1";字段2="值2"}
!dbasemysql.getUpdateSql("表名", tab, where, 格式化参数table) = 返回更新SQL语句\n参数:表名, table对像,where条件,格式化参数table\n参数四 可省略\n参数二格式:{字段1="值1";字段2="值2"}\n格式化参数是一个table表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
!dbasemysql.formatSqlParameters(sql,格式化参数) = 格式化sql\n参数:sql语句,格式化参数\n格式化参数与string.format用法兼容,\n格式化参数也可以是一个表参数,用于替换sql中的命名参数,\nsql中用@前缀标明命名参数,命名参数自动过滤所有转义符
!dbasemysql.getPageList(tabPage,mainSql,orderby,where) = 分页查询,参数:分页条件table对像,主SQL,排序SQL语句,where条件\n具体用法请查看dbase.page分页库\n成功返回分页table记录集,失败返回null,err,sql
end intellisense**/

/**intellisense()
checkAdminSessionLogin() = 判断后台是否有登录,全局函数 \n所在文件:application\common\function.aardio
end intellisense**/

