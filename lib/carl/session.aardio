
namespace carl

class session{
	ctor( dir,timeOut=86400){//过期时间秒,默认1天
		dir := "/config/session/";
		this.dir = dir;
		this.timeOut = timeOut;
		this.deleteTime = this.dir ++ "d.txt";
		table.gc(this,"close");
	};
	
	create = function(){
		var tSession = {};
		tSession.createTime = tonumber(time());
		tSession.Session = {};
		return tSession; 
	}
	
	set = function(k,v){
		var sessionId = ..request.sessionId;
		if(!sessionId) return ;

		var tSession = this.read(sessionId) : this.create();
		
		var nowTime = tonumber(time());
		tSession.updateTime = nowTime;
		tSession.endTimeOut = nowTime + this.timeOut;
		tSession.Session[k] = v;
		return this.saveas(tSession,sessionId);
	}
	
	get = function(k){
		var sessionId = ..request.sessionId;
		if(!sessionId) return;
			
		var tSession,err = this.read(sessionId);
		if(!tSession) return null,err;
		
		var nowTime = tonumber(time());
		tSession.readTime = nowTime;
		tSession.endTimeOut = nowTime + this.timeOut;
		this.saveas(tSession,sessionId);
		return tSession.Session[k];
	}

	saveas = function(tSession,sessionId){
		var fullpath = this.dir ++ sessionId;
		var str = table.tostring(tSession);
		var ok,err;	
		var mutex = process.mutex("session" + sessionId );
		if(mutex){
			if( mutex.waitOne() ){
				ok,err = save(fullpath,str);
				mutex.release();
			}
			mutex.close();
		}
		else {
			ok,err = save(fullpath,str);
		}
		return ok,err; 
	}

	read = function(sessionId){
		var fullpath = this.dir ++ sessionId;
		var str = load(fullpath);
		if(!#str) return;
		
		var tSession;
		try{ tSession = eval(str);}
		if( type.table != type(tSession) ) return; 
		if( !tSession.endTimeOut ) return;
	
		if( tonumber(time()) > tSession.endTimeOut){ //过期
			io.remove(fullpath);
			return ;
		}
		return tSession;
	}
	
	setTimeOut = function(timeOut,sessionId){
		sessionId := ..request.sessionId;
		if(!sessionId) return ;
		
		var tSession = this.read(sessionId) : this.create();
		if(timeOut)	this.timeOut = timeOut;
		tSession.endTimeOut = tonumber(time()) + this.timeOut;
		return this.saveas(tSession,sessionId);
	}

	clear = function(){
		var sessionId = ..request.sessionId;
		if(!sessionId) return ;
		
		var fullpath = this.dir ++ sessionId;
		return io.remove(fullpath);
	}

	delete = function(deleteTimeOut = 60){
		if( !io.exist(this.dir) ) return ; 
		var nowTime = tonumber(time());
		if(deleteTimeOut){
			var lastTime = load(this.deleteTime):0;
			lastTime = tonumber(lastTime) : 0;	
			if( nowTime - lastTime < deleteTimeOut) return ;
		}
		save(this.deleteTime, nowTime);
		
		..thread.create(function(dir){
			import fsys;
			
			fsys.enum(dir, "*.*",
				function(dir,filename,fullpath,findData){ 
					if(#filename != 32) return ;
					
					var str = string.load(fullpath);
					if(!#str) return ;
					
					var tSession;
					try{ tSession = eval(str);}
					if( type.table != type(tSession) ) return ; 
					if( !tSession.endTimeOut ) return ;
				
					if( tonumber(time()) > tSession.endTimeOut){ //过期
						io.remove(fullpath);
					}
				}
				,false
			);
		},this.dir);
	}
	
	close = function(){
		this.delete();
	}
	
}

namespace session

table = ..table;
load = ..string.load;
save = ..string.save;
io = ..io;
time = ..time;
process = ..process;

setDir = function(dir,timeOut){
	var session = ..carl.session(dir,timeOut);
	get = session.get;
	set = session.set;
	clear = session.clear;
	setTimeOut = session.setTimeOut;
	delete = session.delete;
	close = session.close;
}

setDir(dir,timeOut);


/**intellisense()
carl.session = session库
carl.session()
carl.session(dir,timeOut) = 创建session对像,所有参数都可以省略,\n参数一:保存目录,默认 /config/session/ \n参数二:过期时间(秒),默认1天,指没有进行读写session的空闲时间
carl.session() = !session.
!session.setTimeOut(86400) = 重新设置过期时间(秒),默认1天
!session.set("key",value) = 保存Session值,成功返回true,失败返回null,\n参数一:Session名称,\n参数二:Session值,支持:字符串,数值,table对像等所有数据类型\n会根据保存时间重新设置延长过期时间
!session.get("key") = 读取Session值\n会根据读取时间重新设置延长过期时间
!session.clear() = 清空当前session,可用于退出登录时调用
!session.delete() = 删除所有过期的session文件,默认60秒执行一次
!session.close() = 关闭session对像,并执行delete()函数,\n删除过期session\n注意此函数并不会清空当前session\n可以不调用此函数,在对像销毁时会自动调用

carl.session.get("key") =  读取Session值\n会根据读取时间重新设置延长过期时间
carl.session.set("key",value) = 保存Session值,成功返回true,失败返回null,\n参数一:Session名称,\n参数二:Session值,支持:字符串,数值,table对像等所有数据类型\n会根据保存时间重新设置延长过期时间
carl.session.setTimeOut(86400) = 重新设置过期时间(秒),默认1天,指没有进行读写session的空闲时间
carl.session.delete() = 删除所有过期的session文件,默认60秒执行一次
carl.session.clear() = 清空当前session,可用于退出登录时调用
carl.session.close() = 关闭session对像,并执行delete()函数,\n删除过期session\n注意此函数并不会清空当前session\n请在网页请求结束时调用
carl.session.setDir("/config/session/",86400) = 重新设置session目录,过期时间
end intellisense**/
