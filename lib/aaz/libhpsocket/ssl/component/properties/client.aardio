import aaz.libhpsocket.ssl;

namespace aaz.libhpsocket.ssl.component.properties.client;
var _dll = ..aaz.libhpsocket._dll;

setupSSLContext = function(verifyMode=0, pemCertFile, pemKeyFile, keyPassword, caPemCertFileOrPath){
	return !!_dll.HP_SSLClient_SetupSSLContextW(owner.pSocket, verifyMode, pemCertFile, pemKeyFile, keyPassword, caPemCertFileOrPath);
}

setupSSLContextByMemory = function(verifyMode=0 , pemCert , pemKey, keyPassword , caPemCert){
	return _dll.HP_SSLClient_SetupSSLContextByMemoryB(owner.pSocket, verifyMode, pemCert, pemKey, keyPassword, caPemCert); 
}

cleanupSSLContext = function(){
	_dll.HP_SSLClient_CleanupSSLContext(owner.pSocket);
}

startSSLHandShake = function(){
	return _dll.HP_SSLClient_StartSSLHandShakeB(owner.pSocket);
}

getSSLSessionInfo = function(sslSessionInfo){
	var info = {ptr value}
	return _dll.HP_SSLClient_GetSSLSessionInfoB(owner.pSocket, sslSessionInfo, info); 
}
	
isSSLAutoHandShake = {
    _get = function(){
    	return _dll.HP_SSLClient_IsSSLAutoHandShakeB(owner.pSocket); 
    }
    
    _set = function(v){
    	_dll.HP_SSLClient_SetSSLAutoHandShake(owner.pSocket, v);
    } 
}

// ciphers 调整可以增加兼容性
// https://kb.parallels.com/en/124732
// openssl 1.0.2 https://www.openssl.org/docs/man1.0.2/man1/ciphers.htm
// openssl 1.1.0 https://www.openssl.org/docs/man1.1.0/man1/ciphers.html
// openssl 1.1.1 https://www.openssl.org/docs/man1.1.1/man1/ciphers.html
// 5.6 ALL:!aNULL:!eNULL
// 5.8 DEFAULT:!aNULL:!eNULL:!SSLv2:!SSLv3
// 中间值 DEFAULT:!aNULL:!eNULL:!SSLv2
sslCipherList = {
    _get = function(){
    	var p = _dll.HP_SSLClient_GetSSLCipherListP(owner.pSocket)
    	if(p){
    		return ..raw.str(p,true); 	
    	}
    };
    _set = function(v){
    	_dll.HP_SSLClient_SetSSLCipherListW(owner.pSocket, v);
    } 
}

