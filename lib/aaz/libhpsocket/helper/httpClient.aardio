import aaz.libhpsocket.helper.websocket;
import aaz.libhpsocket.helper.client;

namespace aaz.libhpsocket.helper.httpClient;
..table.mix(self, ..aaz.libhpsocket.helper.client);

var wsHelper = ..aaz.libhpsocket.helper.websocket;

var defaultSaveWsUpgradeRequestKey = function(component, key){
	self.reallocString(component, #key);
	self.appendString(component, key, #key)
}

var defaultGetWsUpgradeRequestKey = function(component){
	var requestKey = self.getString(component); 
	self.reallocString(component, 0);
	return requestKey; 
}

getUrlHost = function(component){
	var ip, port = component.getRemoteHost();
	if(!(ip&&port) )return;
	if(ip=="0.0.0.0") ip = "localhost";
	return ..string.format("%s:%d", ip, port); 
}

getUrl = function(component, path, scheme="http"){
	var host = self.getUrlHost(component);
	if(!host) return;
	var url =  ..string.format("%s://%s", scheme, host); 
	if(path){
		path = ..string.replace(path,"\\","/");
		if(path[1]!='/'#) path= "/" + path;
		return url ++ path;
	}
	return url;
}

getWsUrl = function(path){
	return self.getUrl(path, "ws");
}

getWssUrl = function(path){
	return self.getUrl(path, "wss");
}

sendWsUpgradeRequest = function(component, path="/", baseHeaders, saveWsUpgradeRequestKey){
	saveWsUpgradeRequestKey := defaultSaveWsUpgradeRequestKey;
	
	var host = self.getUrlHost(component);
	var origin = self.getUrl(component, path);
	var headers, requestKey = wsHelper.genHeaders(host, origin, baseHeaders);
	
	if(component.sendGet(path, headers)){
		saveWsUpgradeRequestKey(component, requestKey);
		return true; 
	}
}

checkWsUpgradeResponse = function(component, getWsUpgradeRequestKey){
	getWsUpgradeRequestKey := defaultGetWsUpgradeRequestKey;
	
	var acceptKey = component.getHeader("Sec-WebSocket-Accept");
	if(!acceptKey) return ;
	
	var requestKey = getWsUpgradeRequestKey(component);
	if( wsHelper.getSecAccept(requestKey) == acceptKey ) return true;
}

sendWsPong = function(component, mask){
	component.sendWsMessage(null, 0xA, mask);
}
