import aaz.libhpsocket;

namespace aaz.libhpsocket.component.properties.agent;
var _dll = ..aaz.libhpsocket._dll;

_topointer = function(){
    return owner.pAgent; 
}

start = function(bindAddress, asyncConnect=true){
	if(_dll.HP_Agent_StartW(owner.pAgent, bindAddress, asyncConnect)){
		return true; 
	}
	return false, owner.lastError;
}
 
stop = function(){
	if(_dll.HP_Agent_Stop(owner.pAgent)){
		return true; 
	}
	return false, owner.lastError;
}

wait = function(milliseconds){
	if(_dll.HP_Agent_Wait(owner.pAgent, milliseconds)){
		return true; 
	}
	return false; 
}
	
connect = function(remoteAddress, port){
	var connId = {ADDR value};
	if(_dll.HP_Agent_ConnectW(owner.pAgent, remoteAddress, port, connId)){
		return connId.value;
	}
	return false; 	
}

connectWithExtra = function(remoteAddress, port, extra){
	var connId = {ADDR value};
	if(_dll.HP_Agent_ConnectWithExtraW(owner.pAgent, remoteAddress, port, connId, extra)){
		return connId.value;
	}
	return false; 
}

connectWithLocalPort = function(remoteAddress, port, localPort=0){
	var connId = {ADDR value};
	if(_dll.HP_Agent_ConnectWithLocalPortW(owner.pAgent, remoteAddress, port, connId, localPort)){
		return connId.value;
	}
	return false; 		
}

connectWithLocalAddress = function(remoteAddress, port, localAddress){
	var connId = {ADDR value}
	if(_dll.HP_Agent_ConnectWithLocalAddressW(owner.pAgent, remoteAddress, port, connId, localAddress)){
		return connId.value;
	}
	return false;		
}

connectWithExtraAndLocalPort = function(remoteIp, remotePort, extra, localPort=0){
	var connId = {ADDR value}
	if(_dll.HP_Agent_ConnectWithExtraAndLocalPortW(owner.pAgent,remoteIp, remotePort, connId, extra, localPort)){
		return connId.value;
	}	
	return false;		
}

connectWithExtraAndLocalAddressPort = function(remoteIp, remotePort, extra, localPort=0, localIp){
	var connId = {ADDR value}
	if(_dll.HP_Agent_ConnectWithExtraAndLocalAddressPortW(owner.pAgent, remoteIp, remotePort, connId, extra, localPort, localIp)){
		return connId.value;
	}	
	return false;		
}

send = function(connId, buffer, len){
	if(len){
		
	}
	elseif(buffer[["_struct"]]){
		len = ..raw.sizeof(buffer);
	}
	else {
		len = #buffer;
	}
	
	return _dll.HP_Agent_SendB(owner.pAgent, connId, buffer, len);
}

sendPart = function(connId, buffer, length, offset=0){
	if(length){
		
	}
	elseif(buffer[["_struct"]]){
		length = ..raw.sizeof(buffer);
	}
	else {
		length = #buffer;
	}
			
	if(_dll.HP_Agent_SendPartB( owner.pAgent, connId, buffer, length, offset)){
		return true; 
	}
	return false; 
}

pauseReceive = function(connId, pause){
	return _dll.HP_Agent_PauseReceiveB(owner.pAgent, connId, pause); 
}	
		
disconnect = function(connId, force){
	return _dll.HP_Agent_DisconnectB owner.pAgent, connId, force);
}

disconnectLongConnections = function(period,force){
	return _dll.HP_Agent_DisconnectLongConnectionsB(owner.pAgent, period, force);
}

disconnectSilenceConnections = function(period, force){
	return _dll.HP_Agent_DisconnectSilenceConnectionsB(owner.pAgent, period, force);
}	
	
setConnectionExtra = function(connId, pExtra){
	return _dll.HP_Agent_SetConnectionExtraB(owner.pAgent, connId, pExtra);
}

getConnectionExtra = function(connId){
 	var extra = {ptr value};
 		
	return 
		_dll.HP_Agent_GetConnectionExtraB(owner.pAgent, connId, extra), 
		extra.value;
}

getAllConnectionIds = function(){		
	var ids = {
		ADDR array[] = { INT length } 
	};
	
	_dll.HP_Agent_GetAllConnectionIDs(owner.pAgent, null, ids.array);
	if( ids.array.length == 0 ){
		return null; 
	}
	
	_dll.HP_Agent_GetAllConnectionIDsB(owner.pAgent, ids, ids.array);
	return ids.array;
}

getConnectPeriod = function(connId){
	var s = {INT value} 
	if(_dll.HP_Agent_GetConnectPeriod(owner.pAgent, connId, s))
		return s.value;;
}

getSilencePeriod = function(connId){
	var s = {int value} 
	if(_dll.HP_Agent_GetSilencePeriod(owner.pAgent,connId,s))
		return s.value;;
}

getLocalAddress = function(connId){
	var addr ={ WORD value[60] };
	var addrlen = { int value=60 };
	var port = { WORD value };
	
	if(_dll.HP_Agent_GetLocalAddress(owner.pAgent, connId, addr, addrlen, port))
		return addr.value,port.value;
}

getRemoteAddress = function(connId){
	var addr ={ WORD value[60] };
	var addrlen = {int value=60 };
	var port = { WORD value };
	if(_dll.HP_Agent_GetRemoteAddress(owner.pAgent, connId, addr, addrlen, port))
		return addr.value, port.value;
}

getRemoteHost = function(connId){
	var addr ={ WORD value[60] };
	var addrlen = { int value=60 };
	var port = { WORD value };
	if(_dll.HP_Agent_GetRemoteHost(owner.pAgent, connId, addr, addrlen, port))
		return addr.value, port.value;
}

getPendingDataLength = function(connId){
	var s = { int value } 
	if( _dll.HP_Agent_GetPendingDataLength(owner.pAgent, connId, s))
		return s.value;; 
}

isPauseReceive = function( connId ){
	var result = { bool value };
	var ok = _dll.HP_Agent_IsPauseReceive(owner.pAgent, connId, result);
	return ok, result.value; 
}

isConnected = function(connId){
	return _dll.HP_Agent_IsConnectedB(owner.pAgent, connId);
}

isSecure = {
	_get = function(){
		return _dll.HP_Agent_IsSecureB(owner.pAgent);
	}
}

hasStarted = {
	_get = function(){
		return _dll.HP_Agent_HasStartedB(owner.pAgent);
	}
}

state = {
	_get = function(){
		return _dll.HP_Agent_GetState(owner.pAgent);
	}
}

connectionCount = {
    _get = function(){
    	return _dll.HP_Agent_GetConnectionCount(owner.pAgent); 
    }
}

lastError = {
    _get = function(){
    	return _dll.HP_Agent_GetLastError(owner.pAgent);
    }
}

lastErrorDesc = {
    _get = function(){
    	var p = _dll.HP_Agent_GetLastErrorDesc(owner.pAgent);
    	if(p){
    		return ..raw.str(p,true); 	
    	}
    }
}

reuseAddressPolicy = {
    _get = function(){
    	return _dll.HP_Agent_GetReuseAddressPolicy(owner.pAgent); 
    }
    
    _set = function(v){
    	_dll.HP_Agent_SetReuseAddressPolicy(owner.pAgent, v);
    } 
}

sendPolicy = {
    _get = function(){
    	return _dll.HP_Agent_GetSendPolicy(owner.pAgent); 
    }
    
    _set = function(v){
    	_dll.HP_Agent_SetSendPolicy(owner.pAgent, v);
    } 
}

onSendSyncPolicy = {
    _get = function(){
    	return _dll.HP_Agent_GetOnSendSyncPolicy(owner.pAgent); 
    };    
    _set = function(v){
    	_dll.HP_Agent_SetOnSendSyncPolicy(owner.pAgent, v);
    } 
}

freeSocketObjLockTime = {
    _get = function(){
    	return _dll.HP_Agent_GetFreeSocketObjLockTime(owner.pAgent); 
    };    
    _set = function(v){
    	_dll.HP_Agent_SetFreeSocketObjLockTime(owner.pAgent, v);
    } 
}

freeSocketObjPool = {
    _get = function(){
    	return _dll.HP_Agent_GetFreeSocketObjPool(owner.pAgent); 
    };   
    _set = function(v){
    	_dll.HP_Agent_SetFreeSocketObjPool(owner.pAgent, v);
    } 
}

freeBufferObjPool = {
    _get = function(){
    	return _dll.HP_Agent_GetFreeSocketObjPool(owner.pAgent); 
    };  
    _set = function(v){
    	_dll.HP_Agent_SetFreeBufferObjPool(owner.pAgent, v);
    } 
}

freeSocketObjHold = {
    _get = function(){
    	return _dll.HP_Agent_GetFreeBufferObjPool(owner.pAgent); 
    };    
    _set = function(v){
    	_dll.HP_Agent_SetFreeSocketObjHold(owner.pAgent, v);
    } 
}

freeBufferObjHold = {
    _get = function(){
    	return _dll.HP_Agent_GetFreeBufferObjHold(owner.pAgent); 
    };    
    _set = function(v){
    	_dll.HP_Agent_SetFreeBufferObjHold(owner.pAgent, v);
    } 
}

maxConnectionCount = {
    _get = function(){
    	return _dll.HP_Agent_GetMaxConnectionCount(owner.pAgent); 
    };  
    _set = function(v){
    	_dll.HP_Agent_SetMaxConnectionCount(owner.pAgent, v);
    } 
}

workerThreadCount = {
    _get = function(){
    	return _dll.HP_Agent_GetWorkerThreadCount(owner.pAgent); 
    };    
    _set = function(v){
    	_dll.HP_Agent_SetWorkerThreadCount(owner.pAgent, v);
    } 
}

isMarkSilence = {
    _get = function(){
    	return _dll.HP_Agent_IsMarkSilenceB(owner.pAgent); 
    };    
    _set = function(v){
    	_dll.HP_Agent_SetMarkSilence(owner.pAgent, v); 
    }
}