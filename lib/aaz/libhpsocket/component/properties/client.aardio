import aaz.libhpsocket;

namespace aaz.libhpsocket.component.properties.client;
var _dll = ..aaz.libhpsocket._dll;

_topointer = function(){
    return owner.pSocket; 
}

start = function(ip, port, async=true){
	if(ip == "localhost") ip="127.0.0.1";
	if(_dll.HP_Client_StartW(owner.pSocket, ip, port, async)){
		return true; 
	}
	return false, owner.lastError;
}

startWithBindAddress = function(remoteAddress, port, async=true, bindAddress){
	if(_dll.HP_Client_StartWithBindAddressW(owner.pSocket, remoteAddress, port, async, bindAddress)){
		return true; 
	}
	return false, owner.lastError;
}

startWithBindAddressAndLocalPort = function(remoteAddress, port, async=true, bindAddress, localPort){
	if(_dll.HP_Client_StartWithBindAddressAndLocalPortW(owner.pSocket, remoteAddress, port, async, bindAddress, localPort)){
		return true; 
	}
	return false, owner.lastError;
}

stop = function(){
	if(_dll.HP_Client_StopB(owner.pSocket)){
		return true; 
	}
	return false, owner.lastError;
}

send = function(buffer, len){
	if(type(len) == type.number){
	}
	elseif(buffer[["_struct"]]){
		len = ..raw.sizeof(buffer);
	}
	elseif(type(buffer) == type.string){
		len = #buffer;
	}
	return _dll.HP_Client_SendB(owner.pSocket, buffer, len);
}

sendPart = function(buffer, length, offset=0){
	return _dll.HP_Client_SendPartB(owner.pSocket, buffer, length===null?#buffer:length, offset);
}

sendPackets = function(buffer, count){
	return _dll.HP_Client_SendPacketsB(owner.pSocket, buffer, count);
}

pauseReceive = function(pause){
	return _dll.HP_Client_PauseReceiveB(owner.pSocket, pause); 	
}

wait = function(milliseconds){
	return _dll.HP_Client_WaitB(owner.pSocket, milliseconds); 
}

getLocalAddress = function(){
	var addr ={ WORD value[50] };
	var addrlen = {int value=50 };
	var port = { WORD value };
	
	if(_dll.HP_Client_GetLocalAddress(owner.pSocket, addr, addrlen, port)){
		return addr.value, port.value;
	}	
}

getRemoteHost = function(){
	var addr ={ WORD value[50] };
	var addrlen = { int value = 50 };
	var port = { WORD value }; 
		
	if(_dll.HP_Client_GetRemoteHost(owner.pSocket, addr, addrlen, port)){
		return addr.value,port.value;
	}	
}

getPendingDataLength = function(){ 
	var pending = {int value}; 
	
	return 
		_dll.HP_Client_GetPendingDataLengthB(owner.pSocket, pending), 
		pending.value;
}

isPauseReceive = function(){
	var result = {bool value};
	
	return 
		_dll.HP_Client_IsPauseReceiveB(owner.pSocket, result),
		result.value; 
}
	
isSecure = {
	_get = function(){
		return _dll.HP_Client_IsSecureB(owner.pSocket);
	}
}

hasStarted = {
	_get = function(){
		return _dll.HP_Client_HasStartedB(owner.pSocket);
	}
}

state = {
	_get = function(){
		return _dll.HP_Client_GetState(owner.pSocket);
	}
}

lastError = {
    _get = function(){
    	return _dll.HP_Client_GetLastError(owner.pSocket);
    }
}

lastErrorDesc = {
    _get = function(){
    	var p = _dll.HP_Client_GetLastErrorDescP(owner.pSocket);
    	if(p){
    		return ..raw.str(p, true); 	
    	}
    }
}

connectionId = function(){
    _get = function(){
    	return _dll.HP_Client_GetConnectionID(owner.pSocket);
    }
}

isConnected = {
    _get = function(){
    	return _dll.HP_Client_IsConnectedB( owner.pSocket ); 
    }
}

reuseAddressPolicy = {
    _get = function(){
    	return _dll.HP_Client_GetReuseAddressPolicy(owner.pSocket); 
    }

    _set = function(v){
    	_dll.HP_Client_SetReuseAddressPolicy(owner.pSocket, v);
    } 
}

freeBufferPoolSize = {
    _get = function(){
    	return _dll.HP_Client_GetFreeBufferPoolSize(owner.pSocket); 
    }

    _set = function(v){
    	_dll.HP_Client_SetFreeBufferPoolSize(owner.pSocket, v)
    } 
}

freeBufferPoolHold = {
    _get = function(){
    	return _dll.HP_Client_GetFreeBufferPoolHold(owner.pSocket); 
    }

    _set = function(v){
    	_dll.HP_Client_SetFreeBufferPoolHold(owner.pSocket, v);
    } 
}

extra = {
	_get = function(){
		return _dll.HP_Client_GetExtraP(owner.pSocket);
	}

	_set = function(v){
		_dll.HP_Client_SetExtra(owner.pSocket, v);
	}
}