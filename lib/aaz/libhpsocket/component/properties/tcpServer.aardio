import aaz.libhpsocket.component.properties.server;

namespace aaz.libhpsocket.component.properties.tcpServer;
..table.mix(self, ..aaz.libhpsocket.component.properties.server);

var _dll = ..aaz.libhpsocket._dll;

sendSmallFile = function(connId,filename,head,tail){
	if( head ) head ={ INT len=#head;ptr head = head }
	if( tail ) tail ={ INT len=#tail;ptr tail = tail }
	
	return 	_dll.HP_TcpServer_SendSmallFile(owner.pSocket, connId, ..io.fullpath(filename), head, tail);
}

socketListenQueue = {
    _get = function(){
    	return _dll.HP_TcpServer_GetSocketListenQueue(owner.pSocket);
    }
    
    _set = function(v){
    	_dll.HP_TcpServer_SetSocketListenQueue(owner.pSocket, v);
    } 
}

acceptSocketCount = {
    _get = function(){
    	return _dll.HP_TcpServer_GetAcceptSocketCount(owner.pSocket);
    }
    
    _set = function(v){
    	_dll.HP_TcpServer_SetAcceptSocketCount(owner.pSocket, v);
    } 
}

socketBufferSize = {
    _get = function(){
    	return _dll.HP_TcpServer_GetSocketBufferSize(owner.pSocket);
    }
    
    _set = function(v){
    	_dll.HP_TcpServer_SetSocketBufferSize(owner.pSocket, v);
    } 
}

keepAliveTime = {
    _get = function(){
    	return _dll.HP_TcpServer_GetKeepAliveTime(owner.pSocket);
    }
    
    _set = function(v){
    	_dll.HP_TcpServer_SetKeepAliveTime(owner.pSocket, v);
    } 
}

keepAliveInterval = {
    _get = function(){
    	return _dll.HP_TcpServer_GetKeepAliveInterval(owner.pSocket);
    }
    
    _set = function(v){
    	_dll.HP_TcpServer_SetKeepAliveInterval(owner.pSocket, v);
    } 
}