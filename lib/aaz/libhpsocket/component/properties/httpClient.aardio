import aaz.libhpsocket.helper.headers;
import aaz.libhpsocket.helper.websocket;
import aaz.libhpsocket.helper.cookie;
import aaz.libhpsocket.component.properties.tcpClient;

namespace aaz.libhpsocket.component.properties.httpClient;
..table.mix(self, ..aaz.libhpsocket.component.properties.tcpClient);

var _dll = ..aaz.libhpsocket._dll;
var wsHelper = ..aaz.libhpsocket.helper.websocket;
var realloc = ..raw.realloc;
var sizeof = ..raw.sizeof;

sendRequest = function(method="GET", path, headers, body){
	headers = ..aaz.libhpsocket.helper.headers(headers);
	return 	_dll.HP_HttpClient_SendRequestB(owner.pSocket, method, path, headers.struct(), headers.length(), body, #body);
}

sendLocalFile = function(filename, method, path, headers){
	headers = ..aaz.libhpsocket.helper.headers(headers);
	return 	_dll.HP_HttpClient_SendLocalFileB(owner.pSocket, ..io.fullpath(filename), method, path, headers.struct(), headers.length());
}

sendChunkData = function(pData, len=0, extensions){
	return _dll.HP_HttpClient_SendChunkDataB(pData, len, extensions); 
}

sendPost = function(path, headers, body){
	headers = ..aaz.libhpsocket.helper.headers(headers);
	return 	_dll.HP_HttpClient_SendPostB(owner.pSocket,path,headers.struct(),headers.length(), body, #body);
}

sendPut = function(path, headers, body){
	headers = ..aaz.libhpsocket.helper.headers(headers);
	return 	_dll.HP_HttpClient_SendPutB(owner.pSocket,path, headers.struct(), headers.length(), body, #body);
}

sendPatch = function(path, headers, body){
	headers = ..aaz.libhpsocket.helper.headers(headers);
	return 	_dll.HP_HttpClient_SendPatchB(owner.pSocket, path, headers.struct(), headers.length(), body, #body);
} 

sendGet = function(path = "/", headers){
	headers = ..aaz.libhpsocket.helper.headers(headers);
	return 	_dll.HP_HttpClient_SendGetB(owner.pSocket, path, headers.struct(), headers.length());
}

sendDelete = function(path, headers){
	headers = ..aaz.libhpsocket.helper.headers(headers)
	return 	_dll.HP_HttpClient_SendDeleteB(owner.pSocket, path, headers.struct(), headers.length());
} 

sendHead = function(path, headers){
	headers = ..aaz.libhpsocket.helper.headers(headers);
	return 	_dll.HP_HttpClient_SendHeadB(owner.pSocket, path, headers.struct(), headers.length());
} 

sendTrace = function(path, headers){
	headers = ..aaz.libhpsocket.helper.headers(headers);
	return 	_dll.HP_HttpClient_SendTraceB(owner.pSocket, path, headers.struct(), headers.length());
} 

sendOptions = function(path, headers){
	headers = ..aaz.libhpsocket.helper.headers(headers);
	return 	_dll.HP_HttpClient_SendOptionsB(owner.pSocket, path, headers.struct(), headers.length());
} 

sendConnect = function(host, headers){
	headers = ..aaz.libhpsocket.helper.headers(headers);
	return 	_dll.HP_HttpClient_SendConnectB(owner.pSocket, host, headers.struct(), headers.length());
}

sendWsMessage = function(data, opCode, final=true, mask='\x01\x02\x03\x04', bodyLen=0, reserved){
	var len = 0;
	if(data[["_struct"]]){
		len = sizeof(data);
		opCode = 2;
	}
	elseif(type(data) == type.string){
		len = #data;
		opCode = 1;
	}
	if(data) data = realloc(len, null, data); 
	
    var ret = _dll.HP_HttpClient_SendWSMessageB(
    	owner.pSocket, 
    	final, 
    	reserved, 
    	opCode, 
    	mask, 
    	data, 
    	len, 
    	..math.size64(len + bodyLen));
    	
    if(data) data = realloc(0, data);
    return ret;
}

startHttp = function(){
	return _dll.HP_HttpClient_StartHttpB(owner.pSocket); 
}

getParseErrorCode = function(){
	var errdesc= {string value};
	var errno = 0xFFFF & _dll.HP_HttpClient_GetParseErrorCode(owner.pSocket, errdesc);
	return errno,errdesc.value;
}

getHeader = function(name){
	var value = {string v};
	_dll.HP_HttpClient_GetHeaderB(owner.pSocket, name, value);
	return value.v;
}

getHeaders = function(name){
	var headers = { string array[] = {INT length} };

	_dll.HP_HttpClient_GetHeaders(owner.pSocket, name, null, headers.array);
	if(headers.array.length == 0){
		return null; 
	}
	
	_dll.HP_HttpClient_GetHeaders(owner.pSocket, name, headers, headers.array);
	return headers.array;
}

getAllHeaders = function(){
	var headers = ..aaz.libhpsocket.helper.headers(); 
	
	_dll.HP_HttpClient_GetAllHeaders(owner.pSocket, null, headers.array);
	if(headers.array.length == 0){
		return null;  
	}
	
	_dll.HP_HttpClient_GetAllHeaders(owner.pSocket, headers.struct(), headers.array);
	return headers.array;
}

getAllHeaderNames = function(){
	var headerNames = {string array[] = {INT length} };
	
	_dll.HP_HttpClient_GetAllHeaderNames(owner.pSocket,null,headerNames.array);
	if(headerNames.array.length == 0){
		return null; 
	}
	
	_dll.HP_HttpClient_GetAllHeaderNames(owner.pSocket, headerNames, headerNames.array);
	return headerNames.array;
}

getCookie = function(name){
	var cookie = {string value};
	_dll.HP_HttpClient_GetCookie(owner.pSocket, name, cookie);
	return cookie.value;
}

getAllCookies = function(){
	var cookies = ..aaz.libhpsocket.helper.cookie();
	
	_dll.HP_HttpClient_GetAllCookies(owner.pSocket, null, cookies.array);
	if( cookies.array.length == 0 ){
		return null; 
	}
	
	_dll.HP_HttpClient_GetAllCookiesB(owner.pSocket, cookies, cookies.array); 
	return cookies.array;	
}

getWsMessageState = function(){
	var final = {bool value};
	var reserved = {BYTE value};
	var opCode = {BYTE value};
	var mask = {INT value};
	var bodyLen = {LONG value};
	var bodyRemain = {LONG value};
	
	if(_dll.HP_HttpClient_GetWSMessageState(owner.pSocket, final, reserved, opCode, mask, bodyLen, bodyRemain)){
		return {
			final = final.value;
			reserved = reserved.value;
			opCode = opCode.value;
			mask = mask.value;
			bodyLen = bodyLen.value;
			bodyRemain = bodyRemain.value
		}; 
	}	
}

statusCode = {
    _get = function(){
    	// int -> USHORT
    	return 0xFFFF & _dll.HP_HttpClient_GetStatusCode(owner.pSocket);
    }
}

localVersion = {
    _get = function(){
    	return _dll.HP_HttpClient_GetLocalVersion(owner.pSocket);  
    };
    _set = function(v){
    	_dll.HP_HttpClient_SetLocalVersion(owner.pSocket, v);
    }
}

isUpgrade = {
    _get = function(){
    	return _dll.HP_HttpClient_IsUpgradeB(owner.pSocket);
    }
}

isKeepAlive = {
    _get = function(){
    	return _dll.HP_HttpClient_IsKeepAliveB(owner.pSocket);
    }
}

version = {
    _get = function(){
    	return 0xFFFF & _dll.HP_HttpClient_GetVersion(owner.pSocket);
    }
}

contentLength = {
    _get = function(){
    	return _dll.HP_HttpClient_GetContentLengthL(owner.pSocket);
    }
}

contentType = {
    _get = function(){
		var p = _dll.HP_HttpClient_GetContentTypeP(owner.pSocket);
		if(p) return ..raw.str(p, false); 
    }
}

contentEncoding = {
    _get = function(){
		var p = _dll.HP_HttpClient_GetContentEncodingP(owner.pSocket);
		if(p) return ..raw.str(p, false);
    }
}

transferEncoding = {
    _get = function(){
		var p = _dll.HP_HttpClient_GetTransferEncodingP(owner.pSocket);
		if(p) return ..raw.str(p, false); 
    }
}

upgradeType = {
    _get = function(){
    	return _dll.HP_HttpClient_GetUpgradeType(owner.pSocket);
    }
}

isUseCookie = {
    _get = function(){
    	return _dll.HP_HttpClient_IsUseCookieB(owner.pSocket);  
    };
    _set = function(v){
    	_dll.HP_HttpClient_SetUseCookie(owner.pSocket, v)
    } 
}

isHttpAutoStart = {
    _get = function(){
    	return _dll.HP_HttpClient_IsHttpAutoStartB(owner.pSocket);  
    };
    _set = function(v){
    	_dll.HP_HttpClient_SetHttpAutoStart(owner.pSocket, v)
    } 
}