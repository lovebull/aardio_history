import util.metaProperty;
import inet.url;

namespace aaz.libhpsocket.app;
class simpleWebsocketClient{
	ctor(){
		this.ws = ..aaz.libhpsocket.app.simpleWebsocketClient.ws();
		this.wss = ..aaz.libhpsocket.app.simpleWebsocketClient.wss();
	};
	connect = function(url){
		var t = ..inet.url.split(url);
		if(t.scheme == "ws" || t.scheme == "wss"){
			this.scheme = t.scheme;
			return this[t.scheme].connect(url); 
		}
		error("传入了不支持的 url，url 请以 ws 或 wss 开头", 2);
	};
	send = function(msg){
		return this[this.scheme].send(msg); 
	};
	@_metaProperty;	
}
namespace simpleWebsocketClient{
    namespace ..global{
		import aaz.libhpsocket.app.simpleWebsocketClient.ws;
		import aaz.libhpsocket.app.simpleWebsocketClient.wss;
    }
    
   _metaProperty = ..util.metaProperty(
		onOpen = {
			_set = function(v){
				owner.ws.__handler__.onOpen = v;
				owner.wss.__handler__.onOpen = v;
			}
		};
		onClose = {
			_set = function(v){
				owner.ws.__handler__.onClose = v;
				owner.wss.__handler__.onClose = v;
			}
		};
		onMessage = {
			_set = function(v){
				owner.ws.__handler__.onMessage = v;
				owner.wss.__handler__.onMessage = v;
			}
		};
		origin = {
			_set = function(v){
				owner.ws.origin = v;
				owner.wss.origin = v;
			}
		};
		onThreadCreated = {
			_set = function(v){
				owner.ws.onThreadCreated = v;
				owner.wss.onThreadCreated = v;
			}
		}
		sessionId = {
			_set = function(v){
				owner.ws.__sessionId__ = v;
				owner.wss.__sessionId__ = v;
			}
		}
    );
}
