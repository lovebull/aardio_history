import util.metaProperty;
import inet.url;
import aaz.libhpsocket.helper.httpClient;
import aaz.libhpsocket.helper.extra;

namespace aaz.libhpsocket.app.simpleWebsocketClient;
class base{
	ctor( ){
		this.__handler__ = {};
	};
	close = function(){
		this.component.stop();
		this.listener.destroy();		
	};
	disconnect = function(){
		return this.component.stop();
	};
	start = function(host, port){
		var userdata = newUserdata(this.path, this.origin);
		this.component.extra = userdata.extra;
		return this.component.start(host, port);
	};
	connect = function(url){
		var uri = ..inet.url.split(url);
		this.host = uri.host;
		this.path = uri.path;
		if(uri.port == 0){
			if(uri.scheme="ws"){
				this.port = 80;
			}
			elseif(uri.scheme="wss"){
				this.port = 443;
			}
			else error("不支持的协议", 2);
		}
		else {
			this.port = uri.port;
		}
		
		this.listen();
		return this.start(this.host, this.port);
	};
	send = function(msg){
		return this.component.sendWsMessage(msg);
	};
	listen = function(){
		if(this.listened) return ; 
		else this.listened = true;
		
		this.listener.threadGlobal = {
			__handler__ = this.__handler__;
			__onThreadCreated__ = this.onThreadCreated;
			__sessionId__ = this.__sessionId__;
		}

		this.listener.onThreadCreated = function(){
			import aaz.libhpsocket.app.simpleWebsocketClient.base;
			if __onThreadCreated__ __onThreadCreated__();
		}

		this.listener.onHandShake = function(component, connId){
			aaz.libhpsocket.app.simpleWebsocketClient.base.sendWsUpgradeRequest(component);
		}
		
		this.listener.onUpgrade = function(component, connId, upgradeType){
			if(upgradeType != 1) return 2; 
			if(!aaz.libhpsocket.app.simpleWebsocketClient.base.checkWsUpgradeResponse(component)) return 2; 
			if __handler__.onOpen __handler__.onOpen();
		}
		
		this.listener.onWsMessageHeader = function(component, connId, final, reserved, opCode, mask, bodyLen){
			aaz.libhpsocket.app.simpleWebsocketClient.base.onWsMessageHeader(component, connId, final, reserved, opCode, mask, bodyLen);
		}
		
		this.listener.onWsMessageBody = function(component, connId, pData, len){
			aaz.libhpsocket.app.simpleWebsocketClient.base.onWsMessageBody(component, pData, len);	
		}
		
		this.listener.onWsMessageComplete = function(component, connId){
			var msg = aaz.libhpsocket.app.simpleWebsocketClient.base.onWsMessageComplete(component);
			if(msg){
				if __handler__.onMessage __handler__.onMessage(msg);
			}
		}
		
		this.listener.onClose = function(component,connId,enOperation,errCode){
			aaz.libhpsocket.app.simpleWebsocketClient.base.onClose(component);
			if __handler__.onClose __handler__.onClose();
		}
	};
	@_metaProperty;			
}
namespace base{
    _metaProperty = ..util.metaProperty(
		onOpen = {
			_set = function(v){
				owner.__handler__.onOpen = v;
			}
		};
		onClose = {
			_set = function(v){
				owner.__handler__.onClose = v;
			}
		};
		onMessage = {
			_set = function(v){
				owner.__handler__.onMessage = v;
			}
		};
    );
    
	class userdata{
		ctor(wsPath="/", origin){
			this.wsPath = wsPath;
			this.origin = origin;
		}
		byte wsPath[100];
		byte wsKey[24];
		byte origin[50];
		pointer wsMessage;
		@_metaProperty;
	}
	userdata._metaProperty = ..util.metaProperty(
		reallocWsMessage = function(len){
			owner.wsMessage = ..raw.realloc(len, owner.wsMessage, "");  
		};
		concatWsMessage = function(pData, len){
			owner.wsMessage = ..raw.concat(owner.wsMessage, pData, len);
		};
		getWsMessage = function(){
			return ..raw.tostring(owner.wsMessage, 1, ..raw.sizeof(owner.wsMessage)); 	
		};
		freeWsMessage = function(){
			if(owner.wsMessage){
				owner.wsMessage = ..raw.realloc(0, owner.wsMessage);
			}
		};
	)
	
	newUserdata = function(wsPath, origin){
		return ..aaz.libhpsocket.helper.extra(userdata(wsPath, origin));
	}

	var getUserdata = function(component){
		return ..aaz.libhpsocket.helper.extra(userdata(), component.extra);	
	}
	
	var getWsUpgradeRequestKey = function(component){
    	return getUserdata(component).wsKey;; 
	}
	
	var saveWsUpgradeRequestKey = function(component, wsKey){
		var userdata = getUserdata(component);
		userdata.wsKey = wsKey;
		userdata.save();
	}
	
	sendWsUpgradeRequest = function(component){
		var userData = getUserdata(component);
		var wsPath = userData.wsPath;
		var baseHeaders;
		var origin = userData.origin;
		if(origin){
			baseHeaders = {
				["Origin"] = origin;
			}
		}
		return ..aaz.libhpsocket.helper.httpClient.sendWsUpgradeRequest(component, wsPath, baseHeaders, saveWsUpgradeRequestKey);
	}
	
	checkWsUpgradeResponse = function(component){
		return ..aaz.libhpsocket.helper.httpClient.checkWsUpgradeResponse(component, getWsUpgradeRequestKey);
	}
	
	onWsMessageHeader = function(component, connId, final, reserved, opCode, mask, bodyLen){
		if opCode == 0x9 return ; 
		
		var userData = getUserdata(component);
		userData.reallocWsMessage(bodyLen);
		userData.save();
	}
	
	onWsMessageBody = function(component, pData, len){
		if(!component.extra) return ;
		var userData = getUserdata(component);
		userData.concatWsMessage(pData, len);
		userData.save();
	}
	
	onWsMessageComplete = function(component){
		var wsState = component.getWsMessageState();
		if(wsState[["opCode"]] == 0x9){
			..aaz.libhpsocket.helper.httpClient.sendWsPong(component);
			return ; 
		}
		
		if(!component.extra) return ; 
		var userData = getUserdata(component);
		return userData.getWsMessage();
	}
	
	onClose = function(component){
		var data = getUserdata(component);
		data.freeWsMessage();
		data.free();
		component.extra = null;
	}
}
