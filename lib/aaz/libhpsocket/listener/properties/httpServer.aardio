import aaz.libhpsocket;

namespace aaz.libhpsocket.listener.properties.httpServer;
var _dll = ..aaz.libhpsocket._dll;

_topointer = function(){
	return owner.pListener;
}

onPrepareListen = {
	_set = function( callback ){
		owner.OnPrepareListenCallback = owner.createThreadCallback(callback,"int(ptr pSender,addr soListen)");
		_dll.HP_Set_FN_HttpServer_OnPrepareListen(owner.pListener,owner.OnPrepareListenCallback );
	} 	
}

onAccept = {
	_set = function( callback ){
		owner.OnAcceptCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId, ADDR client)");
		_dll.HP_Set_FN_HttpServer_OnAccept(owner.pListener,owner.OnAcceptCallback );
	} 	
}

onHandShake = {
	_set = function( callback ){
		owner.OnHandShakeCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId)");
		_dll.HP_Set_FN_HttpServer_OnHandShake(owner.pListener,owner.OnHandShakeCallback );
	} 	
}

onSend = {
	_set = function( callback ){
		owner.OnSendCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId,pointer pData, int length)");
		_dll.HP_Set_FN_HttpServer_OnSend(owner.pListener,owner.OnSendCallback );
	} 	
}

onClose = {
	_set = function( callback ){
		owner.OnCloseCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId, int enOperation, int iErrorCode)");
		_dll.HP_Set_FN_HttpServer_OnClose(owner.pListener,owner.OnCloseCallback );
	} 	
}

onShutdown = {
	_set = function( callback ){
		owner.OnShutdownCallback = owner.createThreadCallback(callback,"int(ptr pSender)");
		_dll.HP_Set_FN_HttpServer_OnShutdown(owner.pListener,owner.OnShutdownCallback );
	} 	
}

onReceive = {
	_set = function( callback ){
		owner.OnReceiveCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId,pointer pData, int length)");
		_dll.HP_Set_FN_HttpServer_OnReceive(owner.pListener,owner.OnReceiveCallback );
	} 	
}

onMessageBegin = {
	_set = function( callback ){
		owner.OnMessageBeginCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId)");
		_dll.HP_Set_FN_HttpServer_OnMessageBegin(owner.pListener,owner.OnMessageBeginCallback ) 
	} 	
}

onRequestLine = {
	_set = function( callback ){
		owner.OnRequestLineCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId,string method,string url)");
		_dll.HP_Set_FN_HttpServer_OnRequestLine(owner.pListener,owner.OnRequestLineCallback ) 
	} 	
}

onHeader = {
	_set = function( callback ){
		owner.OnHeaderCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId,string name,string value)");
		_dll.HP_Set_FN_HttpServer_OnHeader(owner.pListener,owner.OnHeaderCallback ) 
	} 	
}

onHeadersComplete = {
	_set = function( callback ){
		owner.OnHeadersCompleteCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId)");
		_dll.HP_Set_FN_HttpServer_OnHeadersComplete(owner.pListener,owner.OnHeadersCompleteCallback ) 
	} 	
}

onBody = {
	_set = function( callback ){
		owner.OnBodyCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId,ptr pData, int len)");
		_dll.HP_Set_FN_HttpServer_OnBody(owner.pListener,owner.OnBodyCallback ) 
	} 	
}

onChunkHeader = {
	_set = function( callback ){
		owner.OnChunkHeaderCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId,int len)");
		_dll.HP_Set_FN_HttpServer_OnChunkHeader(owner.pListener,owner.OnChunkHeaderCallback ) 
	} 	
}

onChunkComplete = {
	_set = function( callback ){
		owner.OnChunkCompleteCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId)");
		_dll.HP_Set_FN_HttpServer_OnChunkComplete(owner.pListener,owner.OnChunkCompleteCallback ) 
	} 	
}

onMessageComplete = {
	_set = function( callback ){
		owner.OnMessageCompleteCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId)");
		_dll.HP_Set_FN_HttpServer_OnMessageComplete(owner.pListener,owner.OnMessageCompleteCallback ) 
	} 	
}

onUpgrade = {
	_set = function( callback ){
		owner.OnUpgradeCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId,int upgradeType)");
		_dll.HP_Set_FN_HttpServer_OnUpgrade(owner.pListener,owner.OnUpgradeCallback ) 
	} 	
}

onParseError = {
	_set = function( callback ){
		owner.OnParseErrorCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId, int errorCode,string errorDesc)");
		_dll.HP_Set_FN_HttpServer_OnParseError(owner.pListener,owner.OnParseErrorCallback ) 
	} 	
}

onWsMessageHeader = {
	_set = function( callback ){
		owner.OnWsMessageHeaderCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId,bool final,BYTE reserved,BYTE operationCode,INT mask,long bodyLen)");
		_dll.HP_Set_FN_HttpServer_OnWSMessageHeader(owner.pListener,owner.OnWsMessageHeaderCallback ) 
	} 	
}

onWsMessageBody = {
	_set = function( callback ){
		owner.OnWsMessageBodyCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId,ptr pData,int len)");
		_dll.HP_Set_FN_HttpServer_OnWSMessageBody(owner.pListener,owner.OnWsMessageBodyCallback ) 
	} 	
}

onWsMessageComplete = {
	_set = function( callback ){
		owner.OnWsMessageCompleteCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId)");
		_dll.HP_Set_FN_HttpServer_OnWSMessageComplete(owner.pListener,owner.OnWsMessageCompleteCallback ) 
	} 	
}