import aaz.libhpsocket;

namespace aaz.libhpsocket.listener.properties.udpNode;
var _dll = ..aaz.libhpsocket._dll;

_topointer = function(){
	return owner.pListener;
}

onPrepareListen = {
    _set = function(callback){
    	owner.OnPrepareListenCallback = owner.createThreadCallback(callback, "int(ptr pSender, ADDR soListen)");
    	_dll.HP_Set_FN_UdpNode_OnPrepareListen(owner.pListener, owner.OnPrepareListenCallback);
    } 	
}

onSend = {
    _set = function(callback){
    	owner.OnSendCallback = owner.createThreadCallback(callback,"int(ptr pSender,string remoteAddress,WORD remotePort, pointer pData, int length)");
    	_dll.HP_Set_FN_UdpNode_OnSend( owner.pListener, owner.OnSendCallback );
    } 	
}

onReceive = {
    _set = function(callback){
    	owner.OnReceiveCallback = owner.createThreadCallback(callback,"int(ptr pSender,string remoteAddress,WORD remotePort, pointer pData, int length)");
    	_dll.HP_Set_FN_UdpNode_OnReceive( owner.pListener, owner.OnReceiveCallback );
    } 	
}

onError = {
    _set = function(callback){
    	owner.OnErrorCallback = owner.createThreadCallback(callback,"int(ptr pSender,int enOperation,string remoteAddress,WORD remotePort, pointer pData, int length)");
    	_dll.HP_Set_FN_UdpNode_OnError( owner.pListener, owner.OnErrorCallback );
    } 	
}

onShutdown = {
    _set = function(callback){
    	owner.OnShutdownCallback = owner.createThreadCallback(callback,"int(ptr pSender)");
    	_dll.HP_Set_FN_UdpNode_OnShutdown( owner.pListener, owner.OnShutdownCallback );
    } 	
}