import chrome.path;
import process;
import wsock;
import inet.whttp;
import inet.url;
import win.timer;
import thread.command;
import aaz.libhpsocket.app.simpleWebsocketClient;

namespace aaz.chrome;
class dp{
	ctor(){	
		this.timeout = 10000;
		this.lastTaskDuration = 0;
		this.chromeHost = null; 
		this.chromePort = null;

		var requests = {};
		var requestId = 0;
		var currentFiber;
		var chromePid;
		
		var yield = function(requestId){
			requests[requestId] = {
				tick = ..time.tick();
			}
			return ..fiber.yield(); 
		}
		
		var resume = function(requestId, ...){
			if(requests[requestId]){
				assert( ..fiber.resume(currentFiber, ...)); 
				requests[requestId] = null;
			}
		}
		
		var checkTimeout = function(){
			var now = ..time.tick();
			for(id, info in requests){
				if((now-info.tick)>this.timeout){
    				resume(id, false, "timeout");
				}
			}
		}
		
		var timer = ..win.timer(null, 300);
		timer.onTimer = function(){
			if(!currentFiber) return ; 
			if(..fiber.status(currentFiber) != ..fiber.status.suspended) return ;
			checkTimeout()
		}
		timer.enable()
			

		var thCmd = ..thread.command();
		thCmd.onChromeResponse = function(id, result, err){
    		resume(id, result, err);
		}

		thCmd.onChromeEvent = function(method, params){	
			resume(method, params)

			if(this[["onChromeEvent"]]){
				this.onChromeEvent(method, params)
			}
			
			// 浏览器关闭
			if(method == "Inspector.detached"){
				chromePid = null;
				currentFiber = null;
			}	
		}
		
		thCmd.onChromeConnect = function(...){
			resume("connectChrome", ...);
		}

		var ws = ..aaz.libhpsocket.app.simpleWebsocketClient();
		ws.onThreadCreated = function(){
			import thread.command;
			import web.json;
		}
		
		ws.onOpen = function(){
			thread.command.post("onChromeConnect", true);
		}
		
		ws.onClose = function(){
			thread.command.post("onChromeConnect", false);
		}
		
		ws.onMessage = function(msg){
			if(msg){
				var t = web.json.tryParse(msg)
				if(type(t) == type.table){
					// 请求回复
					if(t.id){
						if(t.error){
							thread.command.post("onChromeResponse", t.id, null, t.error.message);
						}
						else {
							thread.command.post("onChromeResponse", t.id, t.result);
						}
					} // 订阅事件
					elseif(t.method){
					  	thread.command.post("onChromeEvent", t.method, t.params);
					}
				}
			}
		}
		
		..table.gc(this, "close");
	};
	close = function(){
		this.closeChrome();
		timer.disable();
		ws.close();
	};
	init = function(){
		requests = {};
		requestId = 0;
		this.lastTaskDuration = 0;
	};
	waitEvent = function(name){
		return yield(name); 
	};	
	open = function(chromePath, headless=false, userDataDir="\chrome.remote.userdata", port, disableGpu=true){
		this.closeChrome();
		if(chromePath){
			if(!..io.exist(chromePath)){
				error(chromePath ++ " 文件不存在",2);
			}
		}
		else {
			chromePath = ..chrome.path();
			if(!chromePath){
				return null, "找不到 chrome 浏览器";
			}
		}
		
		port := ..wsock.getFreePort();
		if(!port){
			return null, "获取空闲端口失败，请指定端口"; 
		}
		var cmd = {
			"--remote-debugging-port=" ++ port;
			"--user-data-dir=" ++ ..io.createDir(userDataDir);
		}	
		if(disableGpu){
			..table.push(cmd, "--disable-gpu");
		}
		if(headless){
			..table.push(cmd, "--headless");
		}
	
		cmd = ..string.join(cmd, " ");
		var pid, err = ..process.execute(chromePath, cmd);
		if(!pid){
			return null, "启动 chrome 失败，原因：" ++ err; 
		}
		
		chromePid = pid;
		this.chromeHost = "localhost";
		this.chromePort = port;
		return true; 
	};
	getRemoteInfo = function(host, port, path){
		var url = "http://" ++ host ++ ":" ++ port ++ path;

		var html, err, code = ..thread.invokeAndWait(
			function(url){
				import inet.whttp;
				
				var whttp = inet.whttp();
				whttp.setTimeouts(3000, 3000, 3000);
				return whttp.get(url);
			},
			url);
		if(!html){
			return null, err, code; 
		}
		return ..web.json.parse(html);
	};
	getDebugPages = function(host, port){
		var tab, err, code = this.getRemoteInfo(host, port, "/json");
		if(!tab){
			return null, "网络连接有误，获取 debugPages 失败，原因：" ++ err; 
		}
		if(!#tab){
			return null, "没有可用 websocket 目标的列表"; 
		}
		
		var pages = {};
		for(i=1;#tab;1){
			if(tab[i].type == "page"){
				..table.push(pages, tab[i]);
			}
		}
		return pages; 	
	}
	getDebuggerUrl = function(host, port){
		var pages, err = this.getDebugPages(host, port);
		if(!pages){
			return null, err; 
		}
		if(!#pages){
			return null, "没有debugPages"; 
		}
		return pages[1].webSocketDebuggerUrl; 		
	};	
	closeChrome = function(){
		if(chromePid){
			try{
				..process.kill(chromePid);
			}
			chromePid = null;
		}
	};
	connect = function(){
		var url, err = this.getDebuggerUrl(this.chromeHost, this.chromePort);
		if(!url){
			return false, err; 
		}
		var ok, err = ws.connect(url);
		if(!ok){
			return null, "连接 chrome 失败，原因：" ++ err; 
		}
		return this.waitEvent("connectChrome"); 
	};
	run = function(func, ...){
		this.init();
		var fib, err = ..fiber.create(
			function(...){
				if this[["onTaskBegin"]] this.onTaskBegin();
				
				var tick = ..time.tick();
				var ret = {func(...)};
				this.lastTaskDuration = ..time.tick() - tick;
				
				if this[["onTaskEnd"]] this.onTaskEnd(..table.unpackArgs(ret));
			}); 
			
		if(!fib){
			return null, "创建 fiber 失败，原因：" ++  err; 
		}
		assert(..fiber.resume(fib, ...));
		currentFiber = fib;
		return true; 
	};
	send = function(method, params){
		requestId++;
		var json = ..web.json.stringify(
			id = requestId;
			method = method;
			params = params;
		);
		//var ok = httpClient.sendWsMessage(json);
		var ok = ws.send(json);
		if(!ok){
			return false, "发送请求数据失败"; 
		}
		return requestId; 
	};
	xcall = function(method, params){
		var requestId, err = this.send(method, params);
		if(!requestId){
			return null, err; 
		}
		return yield(requestId); 
	};
	newTab = function(){	
	};
	activateTab = function(targetId){
	};
	closeTab = function(targetId){	
	};
	@_meta;	
}
namespace dp{
    namespace ..global{
        import aaz.chrome.dp.methods;
   //     import aaz.chrome.dp.hpsocket.httpClient;	
    }
    var methods = methods;
    
    _meta = {
    	_get = function(k){
    		var tt = type(k)
    		if(tt == type.string){
    			if(owner[["method"]]){
    				k = owner[["method"]] ++ "." ++ k;  
    			}
    			owner[[k]] = {
    				xcall = owner.xcall;
    				send = owner.send;
    				method = k;
    				@_meta;
    			}
    			return owner[[k]]; 
    		}
    	};
    	_call = function(params){
    		var m = ..string.match(owner.method, "^(\a+)\.?");
    		if(m == "raw"){
    			m = ..string.match(owner.method, "^\a+\.(\a+)\.?");
    			if(methods[m]){
    				m = ..string.match(owner.method, "^\a+\.(.+)$");
    				return owner.send(m, params); 
    			}
    		}
    		if(!methods[m]){
    			error("调用了不支持的 Chrome DevTools Protocol 方法 " ++ owner.method, 2);
    		}
    		return owner.xcall(owner.method, params); 	
    	};	
    }  	
}
// https://chromedevtools.github.io/devtools-protocol/
/**intellisense(aaz.chrome)
dp = 谷歌开发者工具协议辅助库
dp() = 创建谷歌开发者工具协议辅助对象\n!cdp.
end intellisense**/

/**intellisense(!cdp)
timeout = 设置单次请求超时，单位毫秒，默认 10000
open(.(chrome exe路径, 是否无头模式, 临时目录, 端口, 是否禁用GPU) = 打开浏览器，所有参数可选，默认不开启无头模式\n\n注：要多开浏览器请指定不同的临时目录，否则同时只能运行一个
connect() = 连接浏览器，成功返回 true， 失败返回 false，错误信息
run(.(任务函数, 任务函数的不定参数) = 运行任务函数，参数@1为任务函数
waitEvent("事件名字") = 等待指定事件到达，成功返回一个表
lastTaskDuration = "最近一次任务的消耗时长，单位毫秒"
onTaskBegin = @.onTaskBegin = function(){
    __/*该事件函数在任务开始时触发*/
}
onTaskEnd = @.onTaskBegin = function(...){
    __/*该事件函数在任务结束时触发，任务返回值作为参数*/
}
Page = 与被检查页面相关的动作和事件都属于页面域\n!Page.
Target = 支持发现更多的目标，并允许附加到他们身上\n!Target.
end intellisense**/

/**intellisense(!Page)
disable() = 禁用页面域通知
enable() = 启用页面域通知
getTargets() = 检索可用目标列表
navigate() = 将当前页面导航到给定的URL
bringToFront() = 将页面置于最前面（激活选项卡）
end intellisense**/

/**intellisense(!Target)
activateTarget() = 激活（聚焦）目标
attachToTarget() = 附加到给定id的目标上
createTarget() = 创建一个新页面
closeTarget() = 关闭目标。如果目标是一个页面，也会被关闭
detachFromTarget() = 分离给定的id的会话
getTargets() = 检索可用目标列表
setDiscoverTargets() = 控制是否发现可用的目标，并通过 targetCreated/targetInfoChanged/targetDestroyed 事件通知
end intellisense**/
